<!DOCTYPE html>
<html lang="de">
  <head>
    <% include commonHead %>
  </head>
  <body>
    <div class="container">
      <div class="jumbotron"><h1>Anleitung</h1>
	    <p>Die Welt ist eine rechteckige Scheibe und dein Ziel ist es, das Volk zu ernähren und wachsen zu lassen. Lerne die Welt von AntJS Schritt für Schritt kennen und werde zum Meister der Ameisen!</p></div>
	    <ul class="nav nav-pills" role="tablist">
        <li role="presentation"><a href="/">AntJS Home</a></li>
        <li role="presentation" class="active"><a href="/guide">Anleitung</a></li>
        <li role="presentation"><a href="/doku">Handbuch</a></li>
        <% if(user) {%>
        <li role="presentation"><a href="/logout">abmelden...</a></li>
        <% } %>
      </ul>
	    
	    <!-- Here comes the content -->
	    
	    <div class="page-header">
        <h2 id="01">Inhaltsverzeichnis</h2>
	    </div>
	    
	    <p><a href="#01">Am Anfang der Zeit</a></p>
	    <p><a href="#02">Die Welt von AntJS</a></p>
	    <p><a href="#03">Der AntJS-Server</a></p>
	    <p><a href="#04">Ameisen und Programmieren</a></p>
	    <p><a href="#05">Erste Schritte</a></p>
	    <p><a href="#06">Zucker und Apfel</a></p>
	    <p><a href="#07">Wachsen und Sterben</a></p>
	    <p><a href="#08">Gedächtnis und Kommunikation</a></p>
	    
	    <div class="page-header">
        <h2 id="01">Am Anfang der Zeit</h2>
	    </div>
	    
	    <p>Bofei erblickte das Licht der Welt zur Runde 0. Er war der erste seiner Art und er stand am Rande eines Hügels. Über dem Hügel ragte eine Fahne, die in der selben Farbe leichtete wie sein Hinterleib. Er verstand: Das war seine Heimat. Es werden mehr kommen von seiner Art, vereint durch ihre gemeinsame Farbe. Sie werden gemeinsam das Unbekannte erkunden, wertvolle Nahrungsmittel finden und diese zum Bau zurücktragen. Es wird wunderbar sein, aber Bofei ahnte auch die möglichen Gefahren: Andere Wesen werden um die knappen Lebensmittel konkurrieren. Er spürte seine eigenen Grenzen, die er nicht überschreiten durfte. Und schließlich waren da noch diese Wanzen ...
	    </p>
	    
	    <p>"Bofei" ist eine Ameise. Ameisen haben ganz witzige Namen wie "Heqaru", "Wauvebeiwei" oder "Kauzevo". Sie bestehen aus drei Körperteilen, an denen zwei Fühler und sechs Beine hängen. Auch wenn ich normalerweise keine Ameisen mag muss ich sagen, dass ich diese Ameisen doch ganz süß finde:
	    </p>
	    
	    <p><img src="/images/01_bofei.jpg" class="img-thumbnail"></img></p>
	    
	    <p>Für Bofei ist seine Welt riesig. Während wir als Zuschauer das ganze Spielfeld einsehen können, sieht Bofei nur einen kleinen Kreis um ihn herum, etwa so weit wie vom Mittelpunkt des Ameisenbaus zu dessen Rand. Er kann nicht sehen, wo sich all die Zuckerhaufen und Äpfel befinden. Deshalb muss er sich auf den Weg machen in diese Welt hinaus. Er kann sich auf zwei Arten bewegen: Er kann entweder in gerader Linie nach vorne gehen oder sich um seine eigene Achse drehen. Seitwärts wie ein Krebs können die Ameisen nicht gehen - ich glaube auch noch nie eine Ameise seitwärts gehen gesehen zu haben.
	    </p>
	    
	    <p>Bofei wurde am Anfang der Zeit geboren. Für Bofei vergeht die Zeit in einzelnen Schritten. In jeder Runde kann er sich um ein kleines Stückchen bewegen oder etwas nachdenken. Dass wir die Bewegung der Ameisen als flüssig wahrnehmen liegt daran, dass in jeder Sekunde 40 Runden vergehen. Das wirkt auf uns fast wie ein kontinuierlicher Verlauf. Was Bofei nicht weiß: Er ist Teil einer Simulation. Du als Programmierer hast die Kontrolle darüber, was Bofei denkt und wie er sich verhält. Du kannst nach belieben neue Simulationen starten und ausprobieren, wie sich deine Ameisen verhalten. Eine Simulation dauert insgesamt 7500 Runden. Danach friert alles ein und die Punkte können ausgewertet werden.
	    </p>
	    
	    <div class="page-header">
        <h2 id="02">Die Welt von AntJS</h2>
	    </div>
	    
	    <p>Die Simulation spielt sich auf einem rechteckigen Stück Boden ab, mitten in einer wunderbaren Wiese unter freien Himmel. Es scheint immer die Sonne, es ist windstill und die Wolken bewegen sich nicht. (Manche Ameisen munkeln, dass der Boden gar nicht in der Wiese liegt, sondern ein paar Zentimeter über dem Gras schwebt. Sie haben Höhenangst bekommen, als sie vom Rand des Spielfelds runtergeschaut haben.) Das ist die Welt unserer Simulation:
	    </p>
	    
	    <p><img src="/images/02_welt.jpg" class="img-thumbnail"></img></p>
	    
	    <p>Jedes Ameisenvolk, dass in der Simulation mitmacht, erhält einen eigenen Ameisenbau. Die Fahne auf dem Bau kennzeichnet die Farbe des Volkes. Die Hinterteile dieses Volkes ist in der selben Farbe. Ich persönlich mag die grünen Ameisen, finde aber auch die schwarzen und weißen ganz cool. Die Farbe wird von der Simulation festgelegt, je nachdem, wie viele Ameisenvölker daran teilnehmen.
	    </p>
	    
	    <p>Ganz scharf sind die Ameisen auf Zucker und Äpfel. Wenn eine Ameise an einem Zuckerhaufen steht, dann kann er sich ein Stückchen Zucker aufladen und diesen zum Bau zurücktragen. Mit diesen Zucker können sich die Ameisen dann vermehren und Nachwuchs aufziehen - ihr wisst schon Bescheid. Das ist alles ziemlich kleinteilig. Dagegen bringt der Apfel auf einmal einfach viel viel mehr Energie. Doch um diesen riesigen Apfel tragen zu können braucht es mindest vier Ameisen von einem Volk. Selbst dann sind sie noch sehr träge. Je mehr Ameisen mithelfen, umso flott kann der Apfel zum Bau zurückgetragen werden und dort verarbeitet werden. Hier sieht du ganz viele Ameisen, die diesen riesigen Ameisen zum Bau tragen:
	    </p>
	    
	    <p><img src="/images/02_nahrung.jpg" class="img-thumbnail"></img></p>
	    
	    <p>Hinten links sieht du noch etwas Grünliches aufblitzen. Das ist eine Wanze. Sie sind eigentlich ganz hübsch und nett, gäbe es da nicht einen Haken: Wanzen fressen gerne Ameisen. Sollte also eine Ameise den Weg einer Wanze kreuzen, dann wird das wohl ihre letzte Begegnung sein. Als Programmierer kann man das als Schicksal akzeptieren oder die Ameisen dazu programmieren, den Wanzen ausweichen. Das ist dir überlassen.
	    </p>
	    
	    <div class="page-header">
        <h2 id="03">Der AntJS-Server</h2>
	    </div>
	    
	    <p>Ich gehe mal davon aus, dass du AntJS in Rahmen eines Workshops kennengelernt hast. Dann hast du dort auch einen Zugang erhalten, mit dem du dich auf dem Server anmelden kannst. Solltest du ein Gast sein, der zufällig auf diese Seite gestoßen ist, dann erstmal: Herzlich Willkommen! Der Haken: Du hast wahrscheinlich noch keinen Zugang. Es gibt auch keine Möglichkeit, dir selber einen Account zu erstellen. Sollte dich das Thema trotzdem brennend interessien, kann du mir eine Mail schreiben:
	    </p>
	    
	    <p><img src="/images/03_email.png" class="img-thumbnail"></img></p>
	    
	    <p>(Ja, das ist ein Bild. Man muss es den Spam-Bots doch nicht zu einfach machen ...) 
	    </p>
	    
	    <p>Mit den Zugangsdaten kannst du dich, wie auf vielen anderen Websites auch, anmelden und mit einem Klick auf "neues Ameisenvolk" dein erstes Ameisenvolk erstellen. Dieses Volk hat standardmäßig den Namen "_neue Ameise_" und enthält eine Vorlage, in der du deinen Code einfügen kannst. So oder so ähnlich könnte es nun bei dir aussehen:
	    </p>
	    
	    <p><img src="/images/03_home.png" class="img-thumbnail"></img></p>
	    
	    <p>Kleines Quiz: Wie bearbeitet man dieses Ameisenvolk? Richtig, mit einem Klick auf den blauen Button "Bearbeiten". Der Umgang mit dem Server ist im Grunde selbsterkärend, daher hier keine langen Worte. Vielleicht nur eine Anmerkung: Du kannst deine Ameisen freigeben. Dann können auch alle anderen Teilnehmer auf diesem Server eine Simulation mit deiner Ameise starten. Diese Ameisen finden sich dann bei der Auswahl der anderen Teilnehmer, sie werden deinem Benutzernamen zugeordnet. Freigegebene Ameisen erscheinen auch auf der Startseite für nicht-angemeldete Gäste. Die Freigabe kann jederzeit wieder gelöscht werden.
	    </p>
	    
	    <p>So sieht es aus, wenn du den Editor geöffnet hast:
	    </p>
	    
	    <p><img src="/images/03_name.png" class="img-thumbnail"></img></p>
	    
	    <p>In der ersten Zeile kannst du den Namen deines Volkes eintragen, den du zwischen die Anführungsstriche setzt (und der in dunkelroter Schrift erscheint). Ich habe dieses Ameisenvolk auf den Namen "Coolmeise" getauft. Deiner Kreativität ist bei der Wahl des Namens keine Grenzen gesetzt. Zahlen, Sonderzeichen und Umlaute sind alles erlaubt. "Gäng$ta-^-^!2!" ist durchaus ein gültiger Name. Die Unterstriche, die anfangs vorhanden waren, darfst du getrost weglassen. Diese sind nur dazu da, dass du neue Ameisen schnell findest. Sie erscheinen in der alphabetischen Übersicht ganz oben. Man darf auch zwei Ameisen mit den gleichen Namen benennen - dann wird es schwierig, sie zu unterscheiden.
	    </p>
	    
	    <div class="page-header">
        <h2 id="04">Ameisen und Programmieren</h2>
	    </div>
	    
	    <p>Was haben nun Ameisen mit Programmieren zu tun? Eigentlich nichts - und genau deshalb verwenden wir sie in AntJS. Unser Ziel ist es, jungen Menschen einen Einblick in die Welt des Programmierens zu geben. Diese Leute haben meist keine Erfahrung mit "Computertechnik" und würden nur den Kopf schütteln bei Begriffen wie Shell, Port, Server oder SSL. Vor allem haben sie kein Bild davon, was man sich unter diesen Konzepten vorstellen soll. Bei Ameisen ist das nicht so. Jeder von uns hat schon mal Ameisen gesehen und beobachtet. Jeder kann sich eine Vorstellung davon machen, welches Verhalten für so eine Ameise normal ist oder nicht. Und mithilfer dieser Vorstellung wollen wir dich in das Programmieren einführen.
	    </p>
	    
	    <p>Natürlich stimmen unsere Ameisen biologisch nicht vollkommen mit der Natur überein. Das wäre viel zu komplex und unübersichtlich. Stattdessen sind unsere Ameisen an Konzepte aus der Informatik angelehnt. Die Bauteile dieser Ameisen sind also keine Zellen oder Neuronen, sondern Ideen aus der Informatik. Das ist das wunderbare am Programmieren: Man kann tatsächlich aus Ideen allein (und etwas Hardware) großartige Dinge bauen. Es würde uns freuen, wenn du am Ende dieses Workshops besser verstehen kannst, wie das funktioniert.
	    </p>
	    
	    <p>Als erstes sind unsere Ameisen <strong>ereignisbasiert</strong>. Ein Ereignis ist ein besonderer Moment im Leben der Ameise. An diesem Moment kann sie wichtige Entscheidungen treffen, die große Auswirkungen haben. Ein Beispiel: die Ameise geht die ganze Zeit geradeaus. Die Momente, in denen sie nur geradeaus geht, sind nicht besonders. Sie hat keinen Grund, ihr Verhalten ändern. Doch dann sieht die Ameise plötzlich einen Zuckerhaufen. Dieser Moment ist ganz besonders. Denn hier muss sich die Ameise entscheiden: Gehe ich weiter geradeaus? Oder soll ich zum Zucker laufen? An diesem Punkt finden also ein Ereignis statt.
	    </p>
	    
	    <p>Um über <strong>Ereignisse</strong> sprechen zu können, erhalten sie von uns Namen. Der Moment, wenn eine Ameise durch die Gegend läuft und plötzlich einen Zuckerhaufen sieht, nennen wir "SiehtZucker", wenn sie einen Apfel sieht, heißt das Ereignis entsprechen "SiehtApfel". Wenn die Ameise nichts zu tun hat, erhält sie das Ereignis "Wartet". Wenn die Ameise geboren wird, erhält sie das Ereignis "IstGeboren", usw ... In der Dokumentation sind alle Ereignisse detailliert beschrieben.
	    </p>
	    
	    <p>Eine Ameise kann genau dann ihr <strong>Verhalten</strong> steuern, wenn ein Ereignis eingetreten ist. Beim Programmieren überlegt man sich also zuerst, bei welchem Ereignis man ansetzen möchte. Innerhalb von diesem Ereignis kannst du dann deinen Code schreiben. Diese Methode ist in der Informatik sehr gängig. Sie hat den großen Vorteil, dass jedes Ereignis ziemlich unabhängig von den anderen funktioniert und man dadurch sein Programm gut strukturieren kann. Zum Beispiel arbeitet auch der AntJS-Server überwiegend mit solchen "Events", wie sie im Fachjargon heißen.
	    </p>
	    
	    <p>Das Verhalten der Ameisen programmierst du <strong>imperativ</strong>. Imperativ heißt Befehlsform. Du kannst deiner Ameise also Befehle geben und sie führt diese aus. Wenn du ihr eine Reihe von Befehlen gibst, dann führt sie diese Befehle auch in dieser Reihenfolge aus. Grundlegende Befehle sind solche wie "Gehe", "Drehe", "GeheZuBau". Viele Befehle nehmen noch einen <em>Parameter</em>, der z.B. darüber bestimmt, um wie viele Schritte oder um welchen Winkel sich die Ameise bewegen soll. 
	    </p>
	    
	    <p>Darüber hinaus hast du Zugriff auf verschiedene <strong>Funktionen</strong>. Funktionen sind Werkzeuge, die dir bei bestimmten Aufgaben helfen. Du kannst mit der Funktion "Zufallszahl" Zufallszahlen erzeugen, mit der Funktion "BestimmeEntfernung" das Spielfeld vermessen, usw ... Sie arbeiten meist mit bestimmten Daten und sind selber keine Befehle. Sie steuern also nicht das Verhalten der Ameise direkt, sondern helfen dir bei der Steuerung.
	    </p>
	    
	    <p>Du hast auch die Möglichkeit, mit einem <strong>Speicher</strong> zu arbeiten. Der Speicher entspricht dem Gedächtnis deiner einzelnen Ameise. Dort kannst du dir ganz viele Dinge merken und sie später wieder aufrufen.
	    </p>
	    
	    <p>Um die vielen Funktionen und den Speicher optimal nutzen zu können, brauchst du <strong>Bedingungen</strong>. Das ist der Punkt, an dem die Herausforderung beginnt, denn Bedingungen sind alles andere als ein einfaches Pflaster. Aber genau diese Bedingungen sind es, die die Informatik so vielseitig und letztlich auch intelligent macht. Für die Ameisen heißt das: Wenn sie z.B. einen Apfel sehen, dann ist es nicht immer gut, sofort dorthin zu laufen. Um das zu entscheiden, brauchen sie Bedingungen. Das unterscheidet letztlich eine schlaue Ameise von einer nicht so schlauen ...
	    </p>
	    
	    <div class="page-header">
        <h2 id="05">Erste Schritte</h2>
	    </div>
	    
	    <p>Wir wollen jetzt unsere ersten Schritte wagen. Erstellt ein neues Ameisenvolk und geht in den Editor. Dort finden sich bereits alle Ereignisse vorgefertigt. Jedes Ereignis besteht aus einer Definitionszeile und einem <strong>Block</strong>, der von geschweiften Klammern (die so { und so } aussehen) umschlossen ist. Innerhalb dieses Blocks findet sich eine leere, eingerückte Zeile. Befehle, die zu diesem Ereignis gehören, kommen innerhalb dieses Blocks. Hier lasse ich die Ameisen ein wenig gehen und drehen:
	    </p>
	    
	    <p><img src="/images/05_quadrat.png" class="img-thumbnail"></img></p>
	    
	    <p>Jeder Befehl kommt auf eine eigene Zeile. Befehle können der <a href="/doku">Dokumentation</a> entnommen und von dort abgeschrieben werden. Man muss nur ein wenig auf die Parameter achten. Wenn in der Dokumentation steht Gehe(<strong>Zahl</strong>), dann stellt das fettgedruckte Wort einen Parameter dar, der mit einer eigentlichen Zahl, z.B. 100, ersetzt werden muss. Als Befehl kommt dann Gehe(100) heraus. Alle Befehle brauchen am Ende ein Paar runder Klammern. Wenn kein Parameter übergeben wird, dann bleiben die runden Klammern leer.
	    </p>
	    
	    <p>Was macht jetzt das Programm oben? Nachdem die Ameise geboren werden, haben sie erstmal nichts zu tun. Dann wird das Ereignis "Wartet" aufgerufen. Der Ameise wird aufgetragen, 100 Schritte zu gehen und dann sich um 90 Grad im Uhrzeigersinn zu drehen. Wenn sie damit fertig ist, hat sie wieder nichts zu tun. Nun wird wieder das Ereignis "Wartet" aufgerufen und die Ameise geht wieder 100 Schrite und dreht sich um 90 Grad. Hier ist ein weiteres kleines Programm:
	    </p>
	    
	    <p><img src="/images/05_strahlen.png" class="img-thumbnail"></img></p>
	    
	    <p>Die Zeile 7 ist neu. Hier steht in der Dokumentation DreheWegVonObjekt(<strong>Objekt</strong>). Ein Objekt kann entweder eine Ameise, ein Bau, ein Zuckerhaufen, ein Apfel oder eine Wanze sein. Objekte haben immer eine Position auf dem Spielfeld. Man kann zu einem Objekt hinlaufen, sich davon wegdrehen oder Entfernungen und Winkel dazwischen messen. Allerdings hat die Ameise nur auf wenige Objekte Zugriff. Sie kann mit "HeimatBau" jederzeit auf ihren eigenen Bau zugreifen. Außerdem kann sie über "this" auf sich selber als Objekt zugreifen. Auf Nahrungsmittel kann sie nur zugreifen, wenn sie sich innerhalb eines entsprechenden Ereignisses befindet.
	    </p>
	    
	    <p>Die Ameise im obigen Beispiel sieht dreht sich also vom Bau weg, geht 100 Schritte, dreht sich um und geht wieder ein paar Schritte. Dann wiederholt sie das ganze von vorne. Überlege dir mal, welche Bewegungsform sich am besten dazu eignet, das Spielfeld zu erkunden und Nahrung zu sammeln.
	    </p>
	    
	    <div class="page-header">
        <h2 id="06">Apfel und Zucker</h2>
	    </div>
	    
	    <p>Unser lieber Bofei bewegt sich über das Spielfeld und sieht plötzlich einen Zuckerhaufen in seiner Nähe. Das Ereignis "SiehtZucker" wird aufgerufen und innerhalb dieses Ereignises kann man über "zucker" auf das aktuelle Zuckerobjekt zugreifen. Also, lieber Bofei, auf zum Zucker:
	    </p>
	    
	    <p><img src="/images/06_zucker.png" class="img-thumbnail"></img></p>
	    
	    <p>Erreicht Bofei den Zuckerhaufen, dann wird das Ereignis "ZuckerErreicht" aufgerufen. Auch hier können wir über "zucker" auf das Zuckerobjekt zugreifen. Bofei nimmt sich also ein Stückchen Zucker und kehrt zum Ameisenbau zurück:
	    </p>
	    
	    <p><img src="/images/06_zuckererreicht.png" class="img-thumbnail"></img></p>
	    
	    <p>Im Ameisenbau wird der Zucker automatisch abgeladen. Ist doch süß, wie die Ameisen ihre Zuckerwürfelchen tragen, nicht? Ein Zuckerhaufen besteht aus 50 Zuckerstücken. Bofei kann also 50 Mal zum Zucker zurücklaufen und sich ein neues Stückchen holen. Aber halt: Wir haben uns gar nicht gemerkt, wo der Zuckerhaufen war! Mist, wir müssen also neu suchen ...
	    </p>
	    
	    <p><img src="/images/06_mitZucker.png" class="img-thumbnail"></img></p>
	    
	    <p>Mit dem Apfel geht es ganz ähnlich. Nur heißt hier der Befehl "BringeApfelZuBau". Dieser Befehl braucht kein Apfelobjekt, hat aber auch nur Wirkung, wenn Bofei sich direkt bei einem Apfel befindet. Dann stellt sich Bofei zum Apfel und wartet, bis 4 Träger zusammengekommen sind. Gemeinsam tragen sie den Apfel zum Bau und liefern ihn dort ab.
	    </p>
	    
	    <div class="page-header">
        <h2 id="07">Wachsen und Sterben</h2>
	    </div>
	    
	    <p>Die anstrengende Suche nach Nahrung wird natürlich belohnt: Für vier Zuckerwürfel vergrößert sich das Volk um eine Ameise. Mit einem Apfel vergrößert sich das Volk um ganze 10 Ameisen. Das ganze ist eine positive Rückkopplung: Je mehr Ameisen, umso schnell kann das Volk Nahrung sammeln und umso schneller wächst es. Es ist nicht unüblich, dass ein Ameisenvolk die Grenze von 100 Ameisen erreicht. Dann ist der Ameisenbau leider voll, die Energie aus der Nahrung wird aber gespeichert. Sobald eine Ameise stirbt, kann sie mit dieser Energie sofort ersetzt werden.
	    </p>
	    
	    <p>Wie sterben Ameisen eigentlich? Eine Ameise kann auf zwei Arten sterben, durch Übermüdung oder durch eine Wanze. Jede Ameise hat eine Reichweite von 3000 Schritten. Sobald diese Reichweite aufgebraucht ist, stirbt sie auf der Stelle. Um die Reichweite aufzuladen, muss sie einmal zum Bau zurückkehren. Dabei reicht es nicht, wenn sie sich zufälligerweise durch den Bau bewegt, sondern sie muss bewusst den Befehl "GeheZuBau" ausführen. Dann wird ihre Reichweite sofort wieder auf die 3000 Schritte aufgeladen. Überlege dir, wie man das geschickt machen kann. Die zweite Art zu sterben ist durch den Angriff einer Wanze. Hier hat sie eine Chance, wenn sie auf das Ereignis "SiehtWanze" entsprechend reagiert.
	    </p>
	    
	    <p><img src="/images/07_wanze.png" class="img-thumbnail"></img></p>
	    
	    <p>Hier sieht man zwei nette Wanzen bei ihrem Spaziergang über das Spielfeld. Glücklicherweise befinden sich keine Ameisen in ihrer Nähe.
	    </p>
	    
	    <div class="page-header">
        <h2 id="08">Gedächtnis und Kommunikation</h2>
	    </div>
	    
	    <p>Hm, was war gestern nochmal für ein Tag?
	    </p>
	    
      <div style="height:300px"></div>
	    
    </div>
  </body>
</html>
