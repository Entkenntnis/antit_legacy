<!DOCTYPE html>
<html lang="de">
  <head>
    <% include ../include/commonHead %>
  </head>
  <body>
    <div class="container-fluid">
      <div class="jumbotron" style="background-image: url(/deco/startseite.png);background-position: center top;background-repeat:no-repeat">
      </div>
	
	    <% include menu %>
	    
	    
	    <div class = "row justify-content-center">
        <div class="col-sm-12" style="max-width:850px">
        
          <br>
          <h2>Inhaltsübersicht</h2>
          <hr>
          
          <h3>Stufe 1</h3>
          
          <ul>
            <li>Neue Ameisen erstellen und bearbeiten</li>
            <li>Bestandteile eines Programms: Ameisendefinition, Ereignisdefinition, Anweisungen</li>
            <li>Ereignis <code>"IstGeboren"</code></li>
            <li>Grundlegende Befehle: <code>Gehe(schritte)</code>, <code>Drehe(winkel)</code> und <code>DreheZuRichtung(himmelsrichtung)</code></li>
          </ul>
          
          <% if (user.level >= 2) { %>
            
            <h3>Stufe 2</h3>
          
            <ul>
              <li>Interaktion mit Nahrungsmitteln: <code>NimmZucker()</code>, <code>LadeZuckerAb()</code> und <code>TrageApfel()</code></li>
              <li>Rückkehr zum Bau mit <code>GeheZuBau()</code></li>
              <li>Teamdefinition: <code>Ameise.SetzeTeams(anzahl)</code></li>
              <li>Bedingte Anweisungen pro Team mit <code>if (InTeam(nummer)) {   }</code></li>
              <li>Tastenkominationen während Simulation: 1/2/3 für Geschwindigkeit, G für Gitternetz</li>
            </ul>
            
          <% } %>
          
          <% if (user.level >= 3) { %>
            
            <h3>Stufe 3</h3>
          
            <ul>
              <li>Schleifen programmieren mit dem Ereignis <code>"IstUntätig"</code></li>
              <li>Sichtung von Nahrungsmitteln mit <code>"SiehtZucker"</code> und <code>"SiehtApfel"</code>, jeweils mit zusätzlichen Parameter für Sichtungsobjekt</li>
              <li>Zum Sichtungsobjekt gehen mit <code>GeheZuZiel(objekt)</code></li>
              <li>Befehlsvarianten ohne Sichtung: <code>GeheZuBauDirekt()</code> und <code>GeheZuZielDirekt(objekt)</code></li>
              <li>Reichweite der Ameisen auf 3000 Schritte begrenzt, zurücksetzbar im Bau</li>
              <li>Auf Rand reagieren mit Ereignis <code>"RandErreicht"</code></li>
            </ul>
            
          <% } %>
          
          <% if (user.level >= 4) { %>
            
            <h3>Stufe 4</h3>
          
            <ul>
              <li>Gift setzen mit <code>SetzeGift()</code></li>
              <li>Teamdefinition mit eigener Reihenfolge: <code>Ameise.SetzeTeamFolge(...)</code></li>
              <li>Zufallszahlen erzeugen: <code>Zufall(von, bis)</code></li>
              <li>Warten mit <code>Warte(ticks)</code></li>
              <li>Wanzen und Gegner aufspüren mit Ereignissen <code>"SiehtWanze"</code>, <code>"SiehWanzeVoraus"</code>, und <code>"SiehtGegner"</code>, jeweils mit Sichtungsobjekt</li>
              <li>Alte Befehle bei Ereignis behalten: <code>FühreAlteBefehleAus()</code></li>
              <li>Syntax-Checker im Editor</li>
            </ul>
            
          <% } %>
          
          <% if (user.level >= 5) { %>
            
            <h3>Stufe 5</h3>
          
            <ul>
              <li>Nachrichten versenden mit <code>SendeNachricht(betreff, info)</code></li>
              <li>Ereignisdefinition zum Empfangen von Nachrichten mit Doppelpunkt vor dem Betreff</li>
              <li>Empfänger eingrenzen mit <code>SetzeLimit(anzahl)</code></li>
              <li>Zugriff auf die Arena</li>
              <li>Todesursache anzeigen mit Taste T während Simulation</li>
              <li>Ameisen freigeben</li>
              <li>Zu Sichtungsobjekt hin und weg drehen mit <code>DreheZuObjekt(objekt)</code> und <code>DreheWegVonObjekt()</code></li>
              <li>Schritte und Runde abfragen mit <code>SchrittZahl</code> und <code>TickZahl</code></li>
              
            </ul>
            
          <% } %>
          
          <% if (user.level >= 6) { %>
            
            <h3>Stufe 6</h3>
          
            <ul>
              <li>Funktionsdefinition mit Hashtag und Parametern</li>
              <li>Antwort geben mit <code>return</code></li>
              <li>Rechenoperatoren: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code></li>
              <li>Bedingte Anweisungen: <code>if ( ) { }</code></li>
              <li>Bedingte Anweisung mit entweder-oder: <code>if ( ) { } else { }</code></li>
              <li>Vergleichsoperatoren: <code>==</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code> und <code>&gt;=</code></li>
              <li>Logische Verknüpfungen: <code>&&</code> (UND), <code>||</code> (ODER)</li>
              <li>Simulationsoptionen: Wiederholung und Nur-Sammel-Modus</li>
              
            </ul>
            
          <% } %>
          
          <% if (user.level >= 7) { %>
            
            <h3>Stufe 7</h3>
          
            <ul>
              <li>Listen erzeugen mit <code>[ , , ... ]</code></li>
              <li>Zugriff auf Einträge mit <code>arr[i]</code>, Index <code>i</code> wird ab 0 gezählt</li>
              <li>Zugriff auf Länge über <code>arr.length</code></li>
              <li>Liste verändern mit <code>arr.push(obj)</code> und <code>arr.shift()</code></li>
              <li>Variablen definieren mit <code>var</code>, global wenn außerdem von Ereignissen</li>
              <li>Mathematische Funktionen: <code>Math.pow(basis, exponent)</code> und <code>Math.round(x)</code></li>
              
            </ul>
            
          <% } %>
          
          <% if (user.level >= 8) { %>
            
            <h3>Stufe 8</h3>
          
            <ul>
              <li>Vermessung mit <code>Distanz(a, b)</code> und <code>Richtung(a, b)</code>, zusammen mit den Variablen <code>Bau</code> und <code>Position</code></li>
              <li>Statuswerte <code>HatZucker</code>, <code>HatApfel</code> und <code>Blickrichtung</code></li>
              <li>Ereignis <code>"Tick"</code></li>
              <li>Werte speichern im <code>Gedächtnis</code></li>
              <li>Meldung ausgeben mit <code>alert(nachricht)</code></li>
              <li>Gespeicherte Sichtungsobjekte prüfen mit <code>Aktiv(obj)</code></li>
              <li>Code unterbrechen mit <code>function*</code> und <code>yield</code></li>
              
            </ul>
            
          <% } %>
          
          <p><a href="/tutorial">zurück</a>
          </p>
        </div>
      </div>
	    
      
      <div style="height:300px"></div>
    </div>
  </body>
</html>
 
